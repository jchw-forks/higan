name: Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build_higan-ui_ubuntu64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev libgtksourceview2.0-dev libgtk2.0-dev libao-dev libopenal-dev
    - name: Make
      run: make -C higan-ui
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: higan-ubuntu64
        path: higan-ui/out/higan-ui

  build_byuu_ubuntu64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev libgtksourceview2.0-dev libgtk2.0-dev libao-dev libopenal-dev
    - name: Make
      run: make -C byuu
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: higan-ubuntu64
        path: byuu/out/byuu

  build_higan-ui_win64:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v2
    - name: Make
      run: make -C higan-ui
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: higan-win64
        path: higan-ui/out/higan-ui.exe

  build_byuu_win64:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v2
    - name: Make
      run: make -C byuu
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: higan-win64
        path: byuu/out/byuu.exe

  make_prerelease:
    if: |
      github.event.action != 'pull_request' &&
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
    - build_higan-ui_ubuntu64
    - build_byuu_ubuntu64
    - build_higan-ui_win64
    - build_byuu_win64
    steps:
    - name: Create Nightly Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        github_rest()
        {
          local method="${1}"
          local url="https://api.github.com${2}"
          shift 2
          >&2 echo "${method} ${url}"
          curl \
            --fail \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -X "${method}" \
            "${url}" \
            "$@"
        }
        github_get_release_id_for_tag()
        {
          payload=$(github_rest GET "/repos/${GITHUB_REPOSITORY}/releases/tags/${1}") || return
          echo "${payload}" | jq .id
        }
        github_delete_release_by_id()
        {
          github_rest DELETE "/repos/${GITHUB_REPOSITORY}/releases/${1}"
        }
        github_create_prerelease()
        {
          local payload="{
            \"tag_name\": \"${1}\",
            \"target_commitish\": \"${2}\",
            \"name\": \"${3}\",
            \"body\": \"${4}\",
            \"draft\": false,
            \"prerelease\": true
          }"
          github_rest POST "/repos/${GITHUB_REPOSITORY}/releases" -d "${payload}"
        }
        make_nightly_release()
        {
          github_create_prerelease \
            nightly \
            "${GITHUB_SHA}" \
            "Nightly $(date +"%Y-%m-%d")" \
            "Auto-generated nightly release on $(date -u +"%Y-%m-%d %T %Z")"
        }
        main()
        {
          # Check for an existing nightly release.
          { release_id=$(github_get_release_id_for_tag nightly); status=$?; } || true
          # Delete existing nightly release if it exists.
          case $status in
            0) github_delete_release_by_id "${release_id}" ;;
            22) >&2 echo "No current nightly release; skipping tag deletion." ;;
            *) >&2 echo "API call failed unexpectedly." && exit 1 ;;
          esac
          # Create a new nightly release using the current revision.
          echo "UPLOAD_URL=$(make_nightly_release | jq .upload_url)" >> $GITHUB_ENV
        }
        main "$@"        
    - uses: actions/download-artifact@v2
      id: download
    - name: Zip Artifacts
      run: |
        for i in */
        do
          OUT="$PWD/$(basename $i).zip"
          cd "$(dirname $i)"
          zip -r "$OUT" "$(basename $i)"
          cd -
        done
    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: higan-ubuntu64.zip
        asset_name: higan-ubuntu64.zip
        asset_content_type: application/zip
    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: higan-win64.zip
        asset_name: higan-win64.zip
        asset_content_type: application/zip
